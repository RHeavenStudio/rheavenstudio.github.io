"use strict";(self.webpackChunkheavenstudio_docs=self.webpackChunkheavenstudio_docs||[]).push([[5743],{3905:(t,e,n)=>{n.d(e,{Zo:()=>m,kt:()=>k});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var d=a.createContext({}),p=function(t){var e=a.useContext(d),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},m=function(t){var e=p(t.components);return a.createElement(d.Provider,{value:e},t.children)},u="mdxType",s={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},g=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,d=t.parentName,m=i(t,["components","mdxType","originalType","parentName"]),u=p(n),g=r,k=u["".concat(d,".").concat(g)]||u[g]||s[g]||l;return n?a.createElement(k,o(o({ref:e},m),{},{components:n})):a.createElement(k,o({ref:e},m))}));function k(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,o=new Array(l);o[0]=g;var i={};for(var d in e)hasOwnProperty.call(e,d)&&(i[d]=e[d]);i.originalType=t,i[u]="string"==typeof t?t:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},4817:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>o,default:()=>s,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const l={},o="Conductor",i={unversionedId:"core/main/conductor",id:"core/main/conductor",title:"Conductor",description:"The Conductor is responsible for all beat and time management in Heaven Studio.",source:"@site/docs-contributing/core/main/conductor.md",sourceDirName:"core/main",slug:"/core/main/conductor",permalink:"/docs-contributing/core/main/conductor",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"GameManagers",permalink:"/docs-contributing/category/gamemanagers"},next:{title:"GameManager",permalink:"/docs-contributing/core/main/gamemanager"}},d={},p=[{value:"Example",id:"example",level:2},{value:"Public Properties",id:"public-properties",level:2},{value:"Public Methods",id:"public-methods",level:2}],m={toc:p},u="wrapper";function s(t){let{components:e,...n}=t;return(0,r.kt)(u,(0,a.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"conductor"},"Conductor"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Conductor")," is responsible for all beat and time management in Heaven Studio. "),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Conductor")," is mostly used in games to calculate the positions of animations, and when sounds should be played."),(0,r.kt)("p",null,"You can play a single ",(0,r.kt)("inlineCode",{parentName:"p"},"AudioClip")," using ",(0,r.kt)("inlineCode",{parentName:"p"},"Play"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Pause")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Stop"),". You can adjust its volume with ",(0,r.kt)("inlineCode",{parentName:"p"},"SetVolume"),", or seek using the multiple ",(0,r.kt)("em",{parentName:"p"},"songPositions"),"."),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'using UnityEngine;\n\nusing HeavenStudio;\n\nnamespace HeavenStudio.Games\n{\n    public class ExampleGame : Minigame\n    {\n        public Animation referenceAnimation;\n\n        public void Update()\n        {\n            // If the songPositionInBeats is 1, this will return 0.5f;\n            float normalizedAnimTime = Conductor.instance.GetPositionFromBeat(0, 2f);\n\n            referenceAnimation.Play("Bounce", 0, normalizedAnimTime);\n        }\n    }\n}\n\n')),(0,r.kt)("h2",{id:"public-properties"},"Public Properties"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Info"),(0,r.kt)("th",{parentName:"tr",align:null},"Returns"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"songBpm"),(0,r.kt)("td",{parentName:"tr",align:null},"Song beats per minute. This is determined by the song you're trying to sync up to."),(0,r.kt)("td",{parentName:"tr",align:null},"float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"secPerBeat"),(0,r.kt)("td",{parentName:"tr",align:null},"The number of seconds for each song beat."),(0,r.kt)("td",{parentName:"tr",align:null},"float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pitchedSecPerBeat"),(0,r.kt)("td",{parentName:"tr",align:null},"The number of seconds for each song beat, inversely scaled to song pitch (higer pitch = shorter time)."),(0,r.kt)("td",{parentName:"tr",align:null},"float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"songPosition"),(0,r.kt)("td",{parentName:"tr",align:null},"Current song position, in seconds."),(0,r.kt)("td",{parentName:"tr",align:null},"float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"songPositionAsDouble"),(0,r.kt)("td",{parentName:"tr",align:null},"Current song position, in seconds."),(0,r.kt)("td",{parentName:"tr",align:null},"double")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"songPositionInBeats"),(0,r.kt)("td",{parentName:"tr",align:null},"Current song position, in beats."),(0,r.kt)("td",{parentName:"tr",align:null},"float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"songPositionInBeatsAsDouble"),(0,r.kt)("td",{parentName:"tr",align:null},"Current song position, in beats."),(0,r.kt)("td",{parentName:"tr",align:null},"double")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"dspStartTimeAsDouble"),(0,r.kt)("td",{parentName:"tr",align:null},"The ",(0,r.kt)("inlineCode",{parentName:"td"},"dspTime")," the ",(0,r.kt)("inlineCode",{parentName:"td"},"Conductor")," started at."),(0,r.kt)("td",{parentName:"tr",align:null},"double")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"startBeatAsDouble"),(0,r.kt)("td",{parentName:"tr",align:null},"The beat we started at. (double)"),(0,r.kt)("td",{parentName:"tr",align:null},"double")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"musicSource"),(0,r.kt)("td",{parentName:"tr",align:null},"The ",(0,r.kt)("inlineCode",{parentName:"td"},"AudioSource")," the ",(0,r.kt)("inlineCode",{parentName:"td"},"Conductor")," will read from."),(0,r.kt)("td",{parentName:"tr",align:null},"AudioSource")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"firstBeatOffset"),(0,r.kt)("td",{parentName:"tr",align:null},"The offset to the first beat of the song in seconds."),(0,r.kt)("td",{parentName:"tr",align:null},"float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isPlaying"),(0,r.kt)("td",{parentName:"tr",align:null},"Returns true if the ",(0,r.kt)("inlineCode",{parentName:"td"},"Conductor")," is currently playing the selected song."),(0,r.kt)("td",{parentName:"tr",align:null},"bool")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isPaused"),(0,r.kt)("td",{parentName:"tr",align:null},"Returns true if the ",(0,r.kt)("inlineCode",{parentName:"td"},"Conductor")," is currently paused, but not fully stopped."),(0,r.kt)("td",{parentName:"tr",align:null},"bool")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"metronome"),(0,r.kt)("td",{parentName:"tr",align:null},"If enabled, a metronome will play a ",(0,r.kt)("em",{parentName:"td"},"tick")," sound every beat."),(0,r.kt)("td",{parentName:"tr",align:null},"bool")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"timeSinceLastTempoChange"),(0,r.kt)("td",{parentName:"tr",align:null},"The time in seconds since the ",(0,r.kt)("inlineCode",{parentName:"td"},"songBpm")," changed."),(0,r.kt)("td",{parentName:"tr",align:null},"float")))),(0,r.kt)("h2",{id:"public-methods"},"Public Methods"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Info"),(0,r.kt)("th",{parentName:"tr",align:null},"Returns"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SetBeat"),(0,r.kt)("td",{parentName:"tr",align:null},'The "proper" way of setting the current beat of the ',(0,r.kt)("inlineCode",{parentName:"td"},"Conductor"),"."),(0,r.kt)("td",{parentName:"tr",align:null},"void")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Play"),(0,r.kt)("td",{parentName:"tr",align:null},"Plays the song at a specified beat."),(0,r.kt)("td",{parentName:"tr",align:null},"void")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Pause"),(0,r.kt)("td",{parentName:"tr",align:null},"Pauses the song."),(0,r.kt)("td",{parentName:"tr",align:null},"void")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Stop"),(0,r.kt)("td",{parentName:"tr",align:null},"Stops the song while setting the current ",(0,r.kt)("inlineCode",{parentName:"td"},"time"),"."),(0,r.kt)("td",{parentName:"tr",align:null},"void")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ReportBeat"),(0,r.kt)("td",{parentName:"tr",align:null},"Returns true if ",(0,r.kt)("inlineCode",{parentName:"td"},"songPositionInBeats")," is greater than the ",(0,r.kt)("inlineCode",{parentName:"td"},"lastReportedBeat"),"."),(0,r.kt)("td",{parentName:"tr",align:null},"bool")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetLoopPositionFromBeat"),(0,r.kt)("td",{parentName:"tr",align:null},"Loops between 2 points in the beat position."),(0,r.kt)("td",{parentName:"tr",align:null},"float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetPositionFromBeat"),(0,r.kt)("td",{parentName:"tr",align:null},"Returns a normalized position between 2 beats."),(0,r.kt)("td",{parentName:"tr",align:null},"float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetBeatFromPosition"),(0,r.kt)("td",{parentName:"tr",align:null},"Opposite of ",(0,r.kt)("inlineCode",{parentName:"td"},"GetPositionFromBeat"),". Returns the corresponding beat from a normalized position."),(0,r.kt)("td",{parentName:"tr",align:null},"float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetPositionFromMargin"),(0,r.kt)("td",{parentName:"tr",align:null},'Returns the "closeness" to a given beat as a normalized value.'),(0,r.kt)("td",{parentName:"tr",align:null},"float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetBeatFromPositionAndMargin"),(0,r.kt)("td",{parentName:"tr",align:null},"Same as ",(0,r.kt)("inlineCode",{parentName:"td"},"GetBeatFromPosition"),", with margin included."),(0,r.kt)("td",{parentName:"tr",align:null},"float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetBpmAtBeat"),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the tempo at a given beat with ",(0,r.kt)("inlineCode",{parentName:"td"},"TempoChange"),"s in mind."),(0,r.kt)("td",{parentName:"tr",align:null},"float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetSongPosFromBeat"),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the song time from the given beat."),(0,r.kt)("td",{parentName:"tr",align:null},"double")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetBeatFromSongPos"),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the beat from the given song time."),(0,r.kt)("td",{parentName:"tr",align:null},"double")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"BeatsToSecs"),(0,r.kt)("td",{parentName:"tr",align:null},"Converts ",(0,r.kt)("inlineCode",{parentName:"td"},"beats")," to realtime seconds."),(0,r.kt)("td",{parentName:"tr",align:null},"double")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SecsToBeats"),(0,r.kt)("td",{parentName:"tr",align:null},"Converts ",(0,r.kt)("inlineCode",{parentName:"td"},"seconds")," to beats."),(0,r.kt)("td",{parentName:"tr",align:null},"double")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetRestFromRealTime"),(0,r.kt)("td",{parentName:"tr",align:null},"Convert real seconds to beats."),(0,r.kt)("td",{parentName:"tr",align:null},"double")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SetBpm"),(0,r.kt)("td",{parentName:"tr",align:null},"Sets the tempo of the ",(0,r.kt)("inlineCode",{parentName:"td"},"Conductor"),"."),(0,r.kt)("td",{parentName:"tr",align:null},"void")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SetVolume"),(0,r.kt)("td",{parentName:"tr",align:null},"Sets the volume of the ",(0,r.kt)("inlineCode",{parentName:"td"},"musicSource"),"."),(0,r.kt)("td",{parentName:"tr",align:null},"void")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SongLengthInBeats"),(0,r.kt)("td",{parentName:"tr",align:null},"The total length of the song, in beats."),(0,r.kt)("td",{parentName:"tr",align:null},"float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SongPosLessThanClipLength"),(0,r.kt)("td",{parentName:"tr",align:null},"Returns true if the given ",(0,r.kt)("inlineCode",{parentName:"td"},"t")," is less than the length of the ",(0,r.kt)("inlineCode",{parentName:"td"},"musicSource")," clip in seconds."),(0,r.kt)("td",{parentName:"tr",align:null},"bool")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"NotStopped"),(0,r.kt)("td",{parentName:"tr",align:null},"Returns true if ",(0,r.kt)("inlineCode",{parentName:"td"},"isPlaying")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"isPaused")," is true."),(0,r.kt)("td",{parentName:"tr",align:null},"bool")))))}s.isMDXComponent=!0}}]);